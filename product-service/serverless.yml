service: product-service

frameworkVersion: "3"

provider:
  name: aws
  region: ap-south-1
  runtime: nodejs14.x
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"
  environment:
    PRODUCTS_TABLE: "products"
    STOCKS_TABLE: "stocks"

functions:
  getProductsList:
    handler: getProductsList.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: getProductsById.getProductsById
    events:
      - http:
          path: /products/{productId}
          method: get
          cors: true
  createProduct:
    handler: createProduct.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
  catalogBatchProcess:
    handler: catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - catalogItemsQueue
              - Arn

resources:
  Resources:
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    stocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STOCKS_TABLE}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    catalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
